
LAB_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080012c4  080012c4  000112c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012d8  080012d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080012d8  080012d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012d8  080012d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012d8  080012d8  000112d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012dc  080012dc  000112dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080012e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080012ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080012ec  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002785  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c5e  00000000  00000000  000227ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000368  00000000  00000000  00023418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002f0  00000000  00000000  00023780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015498  00000000  00000000  00023a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000039a5  00000000  00000000  00038f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000798a2  00000000  00000000  0003c8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b614f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bb4  00000000  00000000  000b61a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080012ac 	.word	0x080012ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080012ac 	.word	0x080012ac

0800014c <display7SEG1>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void display7SEG1(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 81bc 	bhi.w	80004d4 <display7SEG1+0x388>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG1+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001e1 	.word	0x080001e1
 800016c:	08000235 	.word	0x08000235
 8000170:	08000289 	.word	0x08000289
 8000174:	080002dd 	.word	0x080002dd
 8000178:	08000331 	.word	0x08000331
 800017c:	08000385 	.word	0x08000385
 8000180:	080003d9 	.word	0x080003d9
 8000184:	0800042d 	.word	0x0800042d
 8000188:	08000481 	.word	0x08000481
	switch(num){
		case 0:
			HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 800018c:	2200      	movs	r2, #0
 800018e:	2180      	movs	r1, #128	; 0x80
 8000190:	48d3      	ldr	r0, [pc, #844]	; (80004e0 <display7SEG1+0x394>)
 8000192:	f001 f84f 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000196:	2200      	movs	r2, #0
 8000198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800019c:	48d0      	ldr	r0, [pc, #832]	; (80004e0 <display7SEG1+0x394>)
 800019e:	f001 f849 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001a8:	48cd      	ldr	r0, [pc, #820]	; (80004e0 <display7SEG1+0x394>)
 80001aa:	f001 f843 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b4:	48ca      	ldr	r0, [pc, #808]	; (80004e0 <display7SEG1+0x394>)
 80001b6:	f001 f83d 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c0:	48c7      	ldr	r0, [pc, #796]	; (80004e0 <display7SEG1+0x394>)
 80001c2:	f001 f837 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001cc:	48c4      	ldr	r0, [pc, #784]	; (80004e0 <display7SEG1+0x394>)
 80001ce:	f001 f831 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d8:	48c1      	ldr	r0, [pc, #772]	; (80004e0 <display7SEG1+0x394>)
 80001da:	f001 f82b 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 80001de:	e17a      	b.n	80004d6 <display7SEG1+0x38a>
		case 1:
			HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 80001e0:	2201      	movs	r2, #1
 80001e2:	2180      	movs	r1, #128	; 0x80
 80001e4:	48be      	ldr	r0, [pc, #760]	; (80004e0 <display7SEG1+0x394>)
 80001e6:	f001 f825 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80001ea:	2200      	movs	r2, #0
 80001ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f0:	48bb      	ldr	r0, [pc, #748]	; (80004e0 <display7SEG1+0x394>)
 80001f2:	f001 f81f 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001fc:	48b8      	ldr	r0, [pc, #736]	; (80004e0 <display7SEG1+0x394>)
 80001fe:	f001 f819 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000202:	2201      	movs	r2, #1
 8000204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000208:	48b5      	ldr	r0, [pc, #724]	; (80004e0 <display7SEG1+0x394>)
 800020a:	f001 f813 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	48b2      	ldr	r0, [pc, #712]	; (80004e0 <display7SEG1+0x394>)
 8000216:	f001 f80d 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000220:	48af      	ldr	r0, [pc, #700]	; (80004e0 <display7SEG1+0x394>)
 8000222:	f001 f807 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022c:	48ac      	ldr	r0, [pc, #688]	; (80004e0 <display7SEG1+0x394>)
 800022e:	f001 f801 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 8000232:	e150      	b.n	80004d6 <display7SEG1+0x38a>
		case 2:
			HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000234:	2200      	movs	r2, #0
 8000236:	2180      	movs	r1, #128	; 0x80
 8000238:	48a9      	ldr	r0, [pc, #676]	; (80004e0 <display7SEG1+0x394>)
 800023a:	f000 fffb 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000244:	48a6      	ldr	r0, [pc, #664]	; (80004e0 <display7SEG1+0x394>)
 8000246:	f000 fff5 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_SET ) ;
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000250:	48a3      	ldr	r0, [pc, #652]	; (80004e0 <display7SEG1+0x394>)
 8000252:	f000 ffef 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025c:	48a0      	ldr	r0, [pc, #640]	; (80004e0 <display7SEG1+0x394>)
 800025e:	f000 ffe9 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000268:	489d      	ldr	r0, [pc, #628]	; (80004e0 <display7SEG1+0x394>)
 800026a:	f000 ffe3 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000274:	489a      	ldr	r0, [pc, #616]	; (80004e0 <display7SEG1+0x394>)
 8000276:	f000 ffdd 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000280:	4897      	ldr	r0, [pc, #604]	; (80004e0 <display7SEG1+0x394>)
 8000282:	f000 ffd7 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 8000286:	e126      	b.n	80004d6 <display7SEG1+0x38a>
		case 3:
			HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000288:	2200      	movs	r2, #0
 800028a:	2180      	movs	r1, #128	; 0x80
 800028c:	4894      	ldr	r0, [pc, #592]	; (80004e0 <display7SEG1+0x394>)
 800028e:	f000 ffd1 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000298:	4891      	ldr	r0, [pc, #580]	; (80004e0 <display7SEG1+0x394>)
 800029a:	f000 ffcb 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a4:	488e      	ldr	r0, [pc, #568]	; (80004e0 <display7SEG1+0x394>)
 80002a6:	f000 ffc5 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b0:	488b      	ldr	r0, [pc, #556]	; (80004e0 <display7SEG1+0x394>)
 80002b2:	f000 ffbf 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 80002b6:	2201      	movs	r2, #1
 80002b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002bc:	4888      	ldr	r0, [pc, #544]	; (80004e0 <display7SEG1+0x394>)
 80002be:	f000 ffb9 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4885      	ldr	r0, [pc, #532]	; (80004e0 <display7SEG1+0x394>)
 80002ca:	f000 ffb3 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d4:	4882      	ldr	r0, [pc, #520]	; (80004e0 <display7SEG1+0x394>)
 80002d6:	f000 ffad 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 80002da:	e0fc      	b.n	80004d6 <display7SEG1+0x38a>
		case 4:
			HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 80002dc:	2201      	movs	r2, #1
 80002de:	2180      	movs	r1, #128	; 0x80
 80002e0:	487f      	ldr	r0, [pc, #508]	; (80004e0 <display7SEG1+0x394>)
 80002e2:	f000 ffa7 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ec:	487c      	ldr	r0, [pc, #496]	; (80004e0 <display7SEG1+0x394>)
 80002ee:	f000 ffa1 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f8:	4879      	ldr	r0, [pc, #484]	; (80004e0 <display7SEG1+0x394>)
 80002fa:	f000 ff9b 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 80002fe:	2201      	movs	r2, #1
 8000300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000304:	4876      	ldr	r0, [pc, #472]	; (80004e0 <display7SEG1+0x394>)
 8000306:	f000 ff95 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 800030a:	2201      	movs	r2, #1
 800030c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000310:	4873      	ldr	r0, [pc, #460]	; (80004e0 <display7SEG1+0x394>)
 8000312:	f000 ff8f 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000316:	2200      	movs	r2, #0
 8000318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031c:	4870      	ldr	r0, [pc, #448]	; (80004e0 <display7SEG1+0x394>)
 800031e:	f000 ff89 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000322:	2200      	movs	r2, #0
 8000324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000328:	486d      	ldr	r0, [pc, #436]	; (80004e0 <display7SEG1+0x394>)
 800032a:	f000 ff83 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 800032e:	e0d2      	b.n	80004d6 <display7SEG1+0x38a>
		case 5:
			HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000330:	2200      	movs	r2, #0
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	486a      	ldr	r0, [pc, #424]	; (80004e0 <display7SEG1+0x394>)
 8000336:	f000 ff7d 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 800033a:	2201      	movs	r2, #1
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4867      	ldr	r0, [pc, #412]	; (80004e0 <display7SEG1+0x394>)
 8000342:	f000 ff77 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	4864      	ldr	r0, [pc, #400]	; (80004e0 <display7SEG1+0x394>)
 800034e:	f000 ff71 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	4861      	ldr	r0, [pc, #388]	; (80004e0 <display7SEG1+0x394>)
 800035a:	f000 ff6b 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	485e      	ldr	r0, [pc, #376]	; (80004e0 <display7SEG1+0x394>)
 8000366:	f000 ff65 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000370:	485b      	ldr	r0, [pc, #364]	; (80004e0 <display7SEG1+0x394>)
 8000372:	f000 ff5f 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037c:	4858      	ldr	r0, [pc, #352]	; (80004e0 <display7SEG1+0x394>)
 800037e:	f000 ff59 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 8000382:	e0a8      	b.n	80004d6 <display7SEG1+0x38a>
		case 6:
			HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000384:	2200      	movs	r2, #0
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	4855      	ldr	r0, [pc, #340]	; (80004e0 <display7SEG1+0x394>)
 800038a:	f000 ff53 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000394:	4852      	ldr	r0, [pc, #328]	; (80004e0 <display7SEG1+0x394>)
 8000396:	f000 ff4d 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a0:	484f      	ldr	r0, [pc, #316]	; (80004e0 <display7SEG1+0x394>)
 80003a2:	f000 ff47 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ac:	484c      	ldr	r0, [pc, #304]	; (80004e0 <display7SEG1+0x394>)
 80003ae:	f000 ff41 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b8:	4849      	ldr	r0, [pc, #292]	; (80004e0 <display7SEG1+0x394>)
 80003ba:	f000 ff3b 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c4:	4846      	ldr	r0, [pc, #280]	; (80004e0 <display7SEG1+0x394>)
 80003c6:	f000 ff35 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d0:	4843      	ldr	r0, [pc, #268]	; (80004e0 <display7SEG1+0x394>)
 80003d2:	f000 ff2f 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 80003d6:	e07e      	b.n	80004d6 <display7SEG1+0x38a>
		case 7:
			HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80003d8:	2200      	movs	r2, #0
 80003da:	2180      	movs	r1, #128	; 0x80
 80003dc:	4840      	ldr	r0, [pc, #256]	; (80004e0 <display7SEG1+0x394>)
 80003de:	f000 ff29 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80003e2:	2200      	movs	r2, #0
 80003e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e8:	483d      	ldr	r0, [pc, #244]	; (80004e0 <display7SEG1+0x394>)
 80003ea:	f000 ff23 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f4:	483a      	ldr	r0, [pc, #232]	; (80004e0 <display7SEG1+0x394>)
 80003f6:	f000 ff1d 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000400:	4837      	ldr	r0, [pc, #220]	; (80004e0 <display7SEG1+0x394>)
 8000402:	f000 ff17 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800040c:	4834      	ldr	r0, [pc, #208]	; (80004e0 <display7SEG1+0x394>)
 800040e:	f000 ff11 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000418:	4831      	ldr	r0, [pc, #196]	; (80004e0 <display7SEG1+0x394>)
 800041a:	f000 ff0b 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000424:	482e      	ldr	r0, [pc, #184]	; (80004e0 <display7SEG1+0x394>)
 8000426:	f000 ff05 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 800042a:	e054      	b.n	80004d6 <display7SEG1+0x38a>
		case 8:
			HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 800042c:	2200      	movs	r2, #0
 800042e:	2180      	movs	r1, #128	; 0x80
 8000430:	482b      	ldr	r0, [pc, #172]	; (80004e0 <display7SEG1+0x394>)
 8000432:	f000 feff 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800043c:	4828      	ldr	r0, [pc, #160]	; (80004e0 <display7SEG1+0x394>)
 800043e:	f000 fef9 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000448:	4825      	ldr	r0, [pc, #148]	; (80004e0 <display7SEG1+0x394>)
 800044a:	f000 fef3 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000454:	4822      	ldr	r0, [pc, #136]	; (80004e0 <display7SEG1+0x394>)
 8000456:	f000 feed 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000460:	481f      	ldr	r0, [pc, #124]	; (80004e0 <display7SEG1+0x394>)
 8000462:	f000 fee7 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800046c:	481c      	ldr	r0, [pc, #112]	; (80004e0 <display7SEG1+0x394>)
 800046e:	f000 fee1 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000478:	4819      	ldr	r0, [pc, #100]	; (80004e0 <display7SEG1+0x394>)
 800047a:	f000 fedb 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 800047e:	e02a      	b.n	80004d6 <display7SEG1+0x38a>
		case 9:
			HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000480:	2200      	movs	r2, #0
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	4816      	ldr	r0, [pc, #88]	; (80004e0 <display7SEG1+0x394>)
 8000486:	f000 fed5 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <display7SEG1+0x394>)
 8000492:	f000 fecf 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800049c:	4810      	ldr	r0, [pc, #64]	; (80004e0 <display7SEG1+0x394>)
 800049e:	f000 fec9 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <display7SEG1+0x394>)
 80004aa:	f000 fec3 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004b4:	480a      	ldr	r0, [pc, #40]	; (80004e0 <display7SEG1+0x394>)
 80004b6:	f000 febd 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c0:	4807      	ldr	r0, [pc, #28]	; (80004e0 <display7SEG1+0x394>)
 80004c2:	f000 feb7 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <display7SEG1+0x394>)
 80004ce:	f000 feb1 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 80004d2:	e000      	b.n	80004d6 <display7SEG1+0x38a>
		default:
			break;
 80004d4:	bf00      	nop
	}
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40010800 	.word	0x40010800

080004e4 <display7SEG2>:
void display7SEG2(int num){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b09      	cmp	r3, #9
 80004f0:	f200 8180 	bhi.w	80007f4 <display7SEG2+0x310>
 80004f4:	a201      	add	r2, pc, #4	; (adr r2, 80004fc <display7SEG2+0x18>)
 80004f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fa:	bf00      	nop
 80004fc:	08000525 	.word	0x08000525
 8000500:	0800056d 	.word	0x0800056d
 8000504:	080005b5 	.word	0x080005b5
 8000508:	080005fd 	.word	0x080005fd
 800050c:	08000645 	.word	0x08000645
 8000510:	0800068d 	.word	0x0800068d
 8000514:	080006d5 	.word	0x080006d5
 8000518:	0800071d 	.word	0x0800071d
 800051c:	08000765 	.word	0x08000765
 8000520:	080007ad 	.word	0x080007ad
	switch(num){
		case 0:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , GPIO_PIN_RESET ) ;
 8000524:	2200      	movs	r2, #0
 8000526:	2101      	movs	r1, #1
 8000528:	48b5      	ldr	r0, [pc, #724]	; (8000800 <display7SEG2+0x31c>)
 800052a:	f000 fe83 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , GPIO_PIN_RESET ) ;
 800052e:	2200      	movs	r2, #0
 8000530:	2102      	movs	r1, #2
 8000532:	48b3      	ldr	r0, [pc, #716]	; (8000800 <display7SEG2+0x31c>)
 8000534:	f000 fe7e 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C_GPIO_Port , C1_Pin , GPIO_PIN_RESET ) ;
 8000538:	2200      	movs	r2, #0
 800053a:	2104      	movs	r1, #4
 800053c:	48b1      	ldr	r0, [pc, #708]	; (8000804 <display7SEG2+0x320>)
 800053e:	f000 fe79 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , GPIO_PIN_RESET ) ;
 8000542:	2200      	movs	r2, #0
 8000544:	2108      	movs	r1, #8
 8000546:	48ae      	ldr	r0, [pc, #696]	; (8000800 <display7SEG2+0x31c>)
 8000548:	f000 fe74 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , GPIO_PIN_RESET ) ;
 800054c:	2200      	movs	r2, #0
 800054e:	2110      	movs	r1, #16
 8000550:	48ab      	ldr	r0, [pc, #684]	; (8000800 <display7SEG2+0x31c>)
 8000552:	f000 fe6f 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , GPIO_PIN_RESET ) ;
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	48a9      	ldr	r0, [pc, #676]	; (8000800 <display7SEG2+0x31c>)
 800055c:	f000 fe6a 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , GPIO_PIN_SET ) ;
 8000560:	2201      	movs	r2, #1
 8000562:	2140      	movs	r1, #64	; 0x40
 8000564:	48a6      	ldr	r0, [pc, #664]	; (8000800 <display7SEG2+0x31c>)
 8000566:	f000 fe65 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 800056a:	e144      	b.n	80007f6 <display7SEG2+0x312>
		case 1:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , GPIO_PIN_SET ) ;
 800056c:	2201      	movs	r2, #1
 800056e:	2101      	movs	r1, #1
 8000570:	48a3      	ldr	r0, [pc, #652]	; (8000800 <display7SEG2+0x31c>)
 8000572:	f000 fe5f 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , GPIO_PIN_RESET ) ;
 8000576:	2200      	movs	r2, #0
 8000578:	2102      	movs	r1, #2
 800057a:	48a1      	ldr	r0, [pc, #644]	; (8000800 <display7SEG2+0x31c>)
 800057c:	f000 fe5a 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , GPIO_PIN_RESET ) ;
 8000580:	2200      	movs	r2, #0
 8000582:	2104      	movs	r1, #4
 8000584:	489e      	ldr	r0, [pc, #632]	; (8000800 <display7SEG2+0x31c>)
 8000586:	f000 fe55 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , GPIO_PIN_SET ) ;
 800058a:	2201      	movs	r2, #1
 800058c:	2108      	movs	r1, #8
 800058e:	489c      	ldr	r0, [pc, #624]	; (8000800 <display7SEG2+0x31c>)
 8000590:	f000 fe50 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , GPIO_PIN_SET ) ;
 8000594:	2201      	movs	r2, #1
 8000596:	2110      	movs	r1, #16
 8000598:	4899      	ldr	r0, [pc, #612]	; (8000800 <display7SEG2+0x31c>)
 800059a:	f000 fe4b 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , GPIO_PIN_SET ) ;
 800059e:	2201      	movs	r2, #1
 80005a0:	2120      	movs	r1, #32
 80005a2:	4897      	ldr	r0, [pc, #604]	; (8000800 <display7SEG2+0x31c>)
 80005a4:	f000 fe46 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , GPIO_PIN_SET ) ;
 80005a8:	2201      	movs	r2, #1
 80005aa:	2140      	movs	r1, #64	; 0x40
 80005ac:	4894      	ldr	r0, [pc, #592]	; (8000800 <display7SEG2+0x31c>)
 80005ae:	f000 fe41 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 80005b2:	e120      	b.n	80007f6 <display7SEG2+0x312>
		case 2:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , GPIO_PIN_RESET ) ;
 80005b4:	2200      	movs	r2, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	4891      	ldr	r0, [pc, #580]	; (8000800 <display7SEG2+0x31c>)
 80005ba:	f000 fe3b 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , GPIO_PIN_RESET ) ;
 80005be:	2200      	movs	r2, #0
 80005c0:	2102      	movs	r1, #2
 80005c2:	488f      	ldr	r0, [pc, #572]	; (8000800 <display7SEG2+0x31c>)
 80005c4:	f000 fe36 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , GPIO_PIN_SET ) ;
 80005c8:	2201      	movs	r2, #1
 80005ca:	2104      	movs	r1, #4
 80005cc:	488c      	ldr	r0, [pc, #560]	; (8000800 <display7SEG2+0x31c>)
 80005ce:	f000 fe31 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , GPIO_PIN_RESET ) ;
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	488a      	ldr	r0, [pc, #552]	; (8000800 <display7SEG2+0x31c>)
 80005d8:	f000 fe2c 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , GPIO_PIN_RESET ) ;
 80005dc:	2200      	movs	r2, #0
 80005de:	2110      	movs	r1, #16
 80005e0:	4887      	ldr	r0, [pc, #540]	; (8000800 <display7SEG2+0x31c>)
 80005e2:	f000 fe27 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , GPIO_PIN_SET ) ;
 80005e6:	2201      	movs	r2, #1
 80005e8:	2120      	movs	r1, #32
 80005ea:	4885      	ldr	r0, [pc, #532]	; (8000800 <display7SEG2+0x31c>)
 80005ec:	f000 fe22 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , GPIO_PIN_RESET ) ;
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	4882      	ldr	r0, [pc, #520]	; (8000800 <display7SEG2+0x31c>)
 80005f6:	f000 fe1d 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 80005fa:	e0fc      	b.n	80007f6 <display7SEG2+0x312>
		case 3:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , GPIO_PIN_RESET ) ;
 80005fc:	2200      	movs	r2, #0
 80005fe:	2101      	movs	r1, #1
 8000600:	487f      	ldr	r0, [pc, #508]	; (8000800 <display7SEG2+0x31c>)
 8000602:	f000 fe17 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , GPIO_PIN_RESET ) ;
 8000606:	2200      	movs	r2, #0
 8000608:	2102      	movs	r1, #2
 800060a:	487d      	ldr	r0, [pc, #500]	; (8000800 <display7SEG2+0x31c>)
 800060c:	f000 fe12 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , GPIO_PIN_RESET ) ;
 8000610:	2200      	movs	r2, #0
 8000612:	2104      	movs	r1, #4
 8000614:	487a      	ldr	r0, [pc, #488]	; (8000800 <display7SEG2+0x31c>)
 8000616:	f000 fe0d 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , GPIO_PIN_RESET ) ;
 800061a:	2200      	movs	r2, #0
 800061c:	2108      	movs	r1, #8
 800061e:	4878      	ldr	r0, [pc, #480]	; (8000800 <display7SEG2+0x31c>)
 8000620:	f000 fe08 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , GPIO_PIN_SET ) ;
 8000624:	2201      	movs	r2, #1
 8000626:	2110      	movs	r1, #16
 8000628:	4875      	ldr	r0, [pc, #468]	; (8000800 <display7SEG2+0x31c>)
 800062a:	f000 fe03 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , GPIO_PIN_SET ) ;
 800062e:	2201      	movs	r2, #1
 8000630:	2120      	movs	r1, #32
 8000632:	4873      	ldr	r0, [pc, #460]	; (8000800 <display7SEG2+0x31c>)
 8000634:	f000 fdfe 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , GPIO_PIN_RESET ) ;
 8000638:	2200      	movs	r2, #0
 800063a:	2140      	movs	r1, #64	; 0x40
 800063c:	4870      	ldr	r0, [pc, #448]	; (8000800 <display7SEG2+0x31c>)
 800063e:	f000 fdf9 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 8000642:	e0d8      	b.n	80007f6 <display7SEG2+0x312>
		case 4:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , GPIO_PIN_SET ) ;
 8000644:	2201      	movs	r2, #1
 8000646:	2101      	movs	r1, #1
 8000648:	486d      	ldr	r0, [pc, #436]	; (8000800 <display7SEG2+0x31c>)
 800064a:	f000 fdf3 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , GPIO_PIN_RESET ) ;
 800064e:	2200      	movs	r2, #0
 8000650:	2102      	movs	r1, #2
 8000652:	486b      	ldr	r0, [pc, #428]	; (8000800 <display7SEG2+0x31c>)
 8000654:	f000 fdee 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , GPIO_PIN_RESET ) ;
 8000658:	2200      	movs	r2, #0
 800065a:	2104      	movs	r1, #4
 800065c:	4868      	ldr	r0, [pc, #416]	; (8000800 <display7SEG2+0x31c>)
 800065e:	f000 fde9 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , GPIO_PIN_SET ) ;
 8000662:	2201      	movs	r2, #1
 8000664:	2108      	movs	r1, #8
 8000666:	4866      	ldr	r0, [pc, #408]	; (8000800 <display7SEG2+0x31c>)
 8000668:	f000 fde4 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , GPIO_PIN_SET ) ;
 800066c:	2201      	movs	r2, #1
 800066e:	2110      	movs	r1, #16
 8000670:	4863      	ldr	r0, [pc, #396]	; (8000800 <display7SEG2+0x31c>)
 8000672:	f000 fddf 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , GPIO_PIN_RESET ) ;
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	4861      	ldr	r0, [pc, #388]	; (8000800 <display7SEG2+0x31c>)
 800067c:	f000 fdda 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , GPIO_PIN_RESET ) ;
 8000680:	2200      	movs	r2, #0
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	485e      	ldr	r0, [pc, #376]	; (8000800 <display7SEG2+0x31c>)
 8000686:	f000 fdd5 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 800068a:	e0b4      	b.n	80007f6 <display7SEG2+0x312>
		case 5:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , GPIO_PIN_RESET ) ;
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	485b      	ldr	r0, [pc, #364]	; (8000800 <display7SEG2+0x31c>)
 8000692:	f000 fdcf 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , GPIO_PIN_SET ) ;
 8000696:	2201      	movs	r2, #1
 8000698:	2102      	movs	r1, #2
 800069a:	4859      	ldr	r0, [pc, #356]	; (8000800 <display7SEG2+0x31c>)
 800069c:	f000 fdca 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , GPIO_PIN_RESET ) ;
 80006a0:	2200      	movs	r2, #0
 80006a2:	2104      	movs	r1, #4
 80006a4:	4856      	ldr	r0, [pc, #344]	; (8000800 <display7SEG2+0x31c>)
 80006a6:	f000 fdc5 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , GPIO_PIN_RESET ) ;
 80006aa:	2200      	movs	r2, #0
 80006ac:	2108      	movs	r1, #8
 80006ae:	4854      	ldr	r0, [pc, #336]	; (8000800 <display7SEG2+0x31c>)
 80006b0:	f000 fdc0 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , GPIO_PIN_SET ) ;
 80006b4:	2201      	movs	r2, #1
 80006b6:	2110      	movs	r1, #16
 80006b8:	4851      	ldr	r0, [pc, #324]	; (8000800 <display7SEG2+0x31c>)
 80006ba:	f000 fdbb 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , GPIO_PIN_RESET ) ;
 80006be:	2200      	movs	r2, #0
 80006c0:	2120      	movs	r1, #32
 80006c2:	484f      	ldr	r0, [pc, #316]	; (8000800 <display7SEG2+0x31c>)
 80006c4:	f000 fdb6 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , GPIO_PIN_RESET ) ;
 80006c8:	2200      	movs	r2, #0
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	484c      	ldr	r0, [pc, #304]	; (8000800 <display7SEG2+0x31c>)
 80006ce:	f000 fdb1 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 80006d2:	e090      	b.n	80007f6 <display7SEG2+0x312>
		case 6:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , GPIO_PIN_RESET ) ;
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	4849      	ldr	r0, [pc, #292]	; (8000800 <display7SEG2+0x31c>)
 80006da:	f000 fdab 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , GPIO_PIN_SET ) ;
 80006de:	2201      	movs	r2, #1
 80006e0:	2102      	movs	r1, #2
 80006e2:	4847      	ldr	r0, [pc, #284]	; (8000800 <display7SEG2+0x31c>)
 80006e4:	f000 fda6 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , GPIO_PIN_RESET ) ;
 80006e8:	2200      	movs	r2, #0
 80006ea:	2104      	movs	r1, #4
 80006ec:	4844      	ldr	r0, [pc, #272]	; (8000800 <display7SEG2+0x31c>)
 80006ee:	f000 fda1 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , GPIO_PIN_RESET ) ;
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	4842      	ldr	r0, [pc, #264]	; (8000800 <display7SEG2+0x31c>)
 80006f8:	f000 fd9c 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , GPIO_PIN_RESET ) ;
 80006fc:	2200      	movs	r2, #0
 80006fe:	2110      	movs	r1, #16
 8000700:	483f      	ldr	r0, [pc, #252]	; (8000800 <display7SEG2+0x31c>)
 8000702:	f000 fd97 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , GPIO_PIN_RESET ) ;
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	483d      	ldr	r0, [pc, #244]	; (8000800 <display7SEG2+0x31c>)
 800070c:	f000 fd92 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , GPIO_PIN_RESET ) ;
 8000710:	2200      	movs	r2, #0
 8000712:	2140      	movs	r1, #64	; 0x40
 8000714:	483a      	ldr	r0, [pc, #232]	; (8000800 <display7SEG2+0x31c>)
 8000716:	f000 fd8d 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 800071a:	e06c      	b.n	80007f6 <display7SEG2+0x312>
		case 7:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , GPIO_PIN_RESET ) ;
 800071c:	2200      	movs	r2, #0
 800071e:	2101      	movs	r1, #1
 8000720:	4837      	ldr	r0, [pc, #220]	; (8000800 <display7SEG2+0x31c>)
 8000722:	f000 fd87 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , GPIO_PIN_RESET ) ;
 8000726:	2200      	movs	r2, #0
 8000728:	2102      	movs	r1, #2
 800072a:	4835      	ldr	r0, [pc, #212]	; (8000800 <display7SEG2+0x31c>)
 800072c:	f000 fd82 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , GPIO_PIN_RESET ) ;
 8000730:	2200      	movs	r2, #0
 8000732:	2104      	movs	r1, #4
 8000734:	4832      	ldr	r0, [pc, #200]	; (8000800 <display7SEG2+0x31c>)
 8000736:	f000 fd7d 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , GPIO_PIN_SET ) ;
 800073a:	2201      	movs	r2, #1
 800073c:	2108      	movs	r1, #8
 800073e:	4830      	ldr	r0, [pc, #192]	; (8000800 <display7SEG2+0x31c>)
 8000740:	f000 fd78 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , GPIO_PIN_SET ) ;
 8000744:	2201      	movs	r2, #1
 8000746:	2110      	movs	r1, #16
 8000748:	482d      	ldr	r0, [pc, #180]	; (8000800 <display7SEG2+0x31c>)
 800074a:	f000 fd73 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , GPIO_PIN_SET ) ;
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	482b      	ldr	r0, [pc, #172]	; (8000800 <display7SEG2+0x31c>)
 8000754:	f000 fd6e 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , GPIO_PIN_SET ) ;
 8000758:	2201      	movs	r2, #1
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	4828      	ldr	r0, [pc, #160]	; (8000800 <display7SEG2+0x31c>)
 800075e:	f000 fd69 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 8000762:	e048      	b.n	80007f6 <display7SEG2+0x312>
		case 8:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , GPIO_PIN_RESET ) ;
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	4825      	ldr	r0, [pc, #148]	; (8000800 <display7SEG2+0x31c>)
 800076a:	f000 fd63 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , GPIO_PIN_RESET ) ;
 800076e:	2200      	movs	r2, #0
 8000770:	2102      	movs	r1, #2
 8000772:	4823      	ldr	r0, [pc, #140]	; (8000800 <display7SEG2+0x31c>)
 8000774:	f000 fd5e 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , GPIO_PIN_RESET ) ;
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	4820      	ldr	r0, [pc, #128]	; (8000800 <display7SEG2+0x31c>)
 800077e:	f000 fd59 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , GPIO_PIN_RESET ) ;
 8000782:	2200      	movs	r2, #0
 8000784:	2108      	movs	r1, #8
 8000786:	481e      	ldr	r0, [pc, #120]	; (8000800 <display7SEG2+0x31c>)
 8000788:	f000 fd54 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , GPIO_PIN_RESET ) ;
 800078c:	2200      	movs	r2, #0
 800078e:	2110      	movs	r1, #16
 8000790:	481b      	ldr	r0, [pc, #108]	; (8000800 <display7SEG2+0x31c>)
 8000792:	f000 fd4f 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , GPIO_PIN_RESET ) ;
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	4819      	ldr	r0, [pc, #100]	; (8000800 <display7SEG2+0x31c>)
 800079c:	f000 fd4a 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , GPIO_PIN_RESET ) ;
 80007a0:	2200      	movs	r2, #0
 80007a2:	2140      	movs	r1, #64	; 0x40
 80007a4:	4816      	ldr	r0, [pc, #88]	; (8000800 <display7SEG2+0x31c>)
 80007a6:	f000 fd45 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 80007aa:	e024      	b.n	80007f6 <display7SEG2+0x312>
		case 9:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , GPIO_PIN_RESET ) ;
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <display7SEG2+0x31c>)
 80007b2:	f000 fd3f 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , GPIO_PIN_RESET ) ;
 80007b6:	2200      	movs	r2, #0
 80007b8:	2102      	movs	r1, #2
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <display7SEG2+0x31c>)
 80007bc:	f000 fd3a 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , GPIO_PIN_RESET ) ;
 80007c0:	2200      	movs	r2, #0
 80007c2:	2104      	movs	r1, #4
 80007c4:	480e      	ldr	r0, [pc, #56]	; (8000800 <display7SEG2+0x31c>)
 80007c6:	f000 fd35 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , GPIO_PIN_RESET ) ;
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <display7SEG2+0x31c>)
 80007d0:	f000 fd30 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , GPIO_PIN_SET ) ;
 80007d4:	2201      	movs	r2, #1
 80007d6:	2110      	movs	r1, #16
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <display7SEG2+0x31c>)
 80007da:	f000 fd2b 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , GPIO_PIN_RESET ) ;
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	4807      	ldr	r0, [pc, #28]	; (8000800 <display7SEG2+0x31c>)
 80007e4:	f000 fd26 	bl	8001234 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , GPIO_PIN_RESET ) ;
 80007e8:	2200      	movs	r2, #0
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <display7SEG2+0x31c>)
 80007ee:	f000 fd21 	bl	8001234 <HAL_GPIO_WritePin>
			break;
 80007f2:	e000      	b.n	80007f6 <display7SEG2+0x312>
		default:
			break;
 80007f4:	bf00      	nop
	}
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40010c00 	.word	0x40010c00
 8000804:	40010800 	.word	0x40010800

08000808 <ledonway1>:
void ledonway1(char *led) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, led == "RED" ? RESET : SET);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <ledonway1+0x58>)
 8000814:	4293      	cmp	r3, r2
 8000816:	bf14      	ite	ne
 8000818:	2301      	movne	r3, #1
 800081a:	2300      	moveq	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	2110      	movs	r1, #16
 8000822:	4810      	ldr	r0, [pc, #64]	; (8000864 <ledonway1+0x5c>)
 8000824:	f000 fd06 	bl	8001234 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, led == "YELLOW" ? RESET : SET);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <ledonway1+0x60>)
 800082c:	4293      	cmp	r3, r2
 800082e:	bf14      	ite	ne
 8000830:	2301      	movne	r3, #1
 8000832:	2300      	moveq	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	2120      	movs	r1, #32
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <ledonway1+0x5c>)
 800083c:	f000 fcfa 	bl	8001234 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, led == "GREEN" ? RESET : SET);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <ledonway1+0x64>)
 8000844:	4293      	cmp	r3, r2
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <ledonway1+0x5c>)
 8000854:	f000 fcee 	bl	8001234 <HAL_GPIO_WritePin>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	080012c4 	.word	0x080012c4
 8000864:	40010800 	.word	0x40010800
 8000868:	080012c8 	.word	0x080012c8
 800086c:	080012d0 	.word	0x080012d0

08000870 <ledonway2>:

void ledonway2(char *led) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, led == "RED" ? RESET : SET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <ledonway2+0x58>)
 800087c:	4293      	cmp	r3, r2
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	2102      	movs	r1, #2
 800088a:	4810      	ldr	r0, [pc, #64]	; (80008cc <ledonway2+0x5c>)
 800088c:	f000 fcd2 	bl	8001234 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, led == "YELLOW" ? RESET : SET);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <ledonway2+0x60>)
 8000894:	4293      	cmp	r3, r2
 8000896:	bf14      	ite	ne
 8000898:	2301      	movne	r3, #1
 800089a:	2300      	moveq	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	2104      	movs	r1, #4
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <ledonway2+0x5c>)
 80008a4:	f000 fcc6 	bl	8001234 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, led == "GREEN" ? RESET : SET);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <ledonway2+0x64>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	2108      	movs	r1, #8
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <ledonway2+0x5c>)
 80008bc:	f000 fcba 	bl	8001234 <HAL_GPIO_WritePin>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	080012c4 	.word	0x080012c4
 80008cc:	40010800 	.word	0x40010800
 80008d0:	080012c8 	.word	0x080012c8
 80008d4:	080012d0 	.word	0x080012d0

080008d8 <update7SegmentWay1>:

void update7SegmentWay1(int remainingTime) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    display7SEG1(remainingTime);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff fc33 	bl	800014c <display7SEG1>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <update7SegmentWay2>:

void update7SegmentWay2(int remainingTime) {
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
    display7SEG2(remainingTime);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fdf4 	bl	80004e4 <display7SEG2>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <main>:

int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090a:	f000 f9af 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 f8c7 	bl	8000aa0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int stateWay1 = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    int counterWay1 = 800;  // RED1 thời gian ban đầu = 8 giây
 8000916:	f44f 7348 	mov.w	r3, #800	; 0x320
 800091a:	623b      	str	r3, [r7, #32]

    int stateWay2 = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
    int counterWay2 = 500;  // GREEN2 thời gian ban đầu = 5 giây
 8000920:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000924:	61bb      	str	r3, [r7, #24]

    int RED_TIME_WAY1 = 8;   // Đèn đỏ đường 1 = 8 giây
 8000926:	2308      	movs	r3, #8
 8000928:	617b      	str	r3, [r7, #20]
    int GREEN_TIME_WAY1 = 5; // Đèn xanh đường 1 = 5 giây
 800092a:	2305      	movs	r3, #5
 800092c:	613b      	str	r3, [r7, #16]
    int YELLOW_TIME_WAY1 = 3; // Đèn vàng đường 1 = 3 giây
 800092e:	2303      	movs	r3, #3
 8000930:	60fb      	str	r3, [r7, #12]

    int RED_TIME_WAY2 = 8;   // Đèn đỏ đường 2 = 8 giây
 8000932:	2308      	movs	r3, #8
 8000934:	60bb      	str	r3, [r7, #8]
    int GREEN_TIME_WAY2 = 5; // Đèn xanh đường 2 = 5 giây
 8000936:	2305      	movs	r3, #5
 8000938:	607b      	str	r3, [r7, #4]
    int YELLOW_TIME_WAY2 = 3; // Đèn vàng đường 2 = 3 giây
 800093a:	2303      	movs	r3, #3
 800093c:	603b      	str	r3, [r7, #0]

    while (1) {
        switch (stateWay1) {
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	2b02      	cmp	r3, #2
 8000942:	d035      	beq.n	80009b0 <main+0xac>
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	2b02      	cmp	r3, #2
 8000948:	dc48      	bgt.n	80009dc <main+0xd8>
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <main+0x54>
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	2b01      	cmp	r3, #1
 8000954:	d016      	beq.n	8000984 <main+0x80>
 8000956:	e041      	b.n	80009dc <main+0xd8>
            case 0:
                ledonway1("RED");
 8000958:	484d      	ldr	r0, [pc, #308]	; (8000a90 <main+0x18c>)
 800095a:	f7ff ff55 	bl	8000808 <ledonway1>
                if (counterWay1 <= 0) {
 800095e:	6a3b      	ldr	r3, [r7, #32]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dc04      	bgt.n	800096e <main+0x6a>
                    stateWay1 = 1;
 8000964:	2301      	movs	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
                    counterWay1 = 500; // GREEN1
 8000968:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800096c:	623b      	str	r3, [r7, #32]
                }
                update7SegmentWay1(counterWay1 / 100);
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	4a48      	ldr	r2, [pc, #288]	; (8000a94 <main+0x190>)
 8000972:	fb82 1203 	smull	r1, r2, r2, r3
 8000976:	1152      	asrs	r2, r2, #5
 8000978:	17db      	asrs	r3, r3, #31
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ffab 	bl	80008d8 <update7SegmentWay1>
                break;
 8000982:	e02b      	b.n	80009dc <main+0xd8>

            case 1:
                ledonway1("GREEN");
 8000984:	4844      	ldr	r0, [pc, #272]	; (8000a98 <main+0x194>)
 8000986:	f7ff ff3f 	bl	8000808 <ledonway1>
                if (counterWay1 <= 0) {
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	2b00      	cmp	r3, #0
 800098e:	dc04      	bgt.n	800099a <main+0x96>
                    stateWay1 = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
                    counterWay1 = 300;  // YELLOW1
 8000994:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000998:	623b      	str	r3, [r7, #32]
                }
                update7SegmentWay1(counterWay1 / 100);
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	4a3d      	ldr	r2, [pc, #244]	; (8000a94 <main+0x190>)
 800099e:	fb82 1203 	smull	r1, r2, r2, r3
 80009a2:	1152      	asrs	r2, r2, #5
 80009a4:	17db      	asrs	r3, r3, #31
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff95 	bl	80008d8 <update7SegmentWay1>
                break;
 80009ae:	e015      	b.n	80009dc <main+0xd8>

            case 2:
                ledonway1("YELLOW");
 80009b0:	483a      	ldr	r0, [pc, #232]	; (8000a9c <main+0x198>)
 80009b2:	f7ff ff29 	bl	8000808 <ledonway1>
                if (counterWay1 <= 0) {
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dc04      	bgt.n	80009c6 <main+0xc2>
                    stateWay1 = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
                    counterWay1 = 800;  // RED1 = 8 giây
 80009c0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80009c4:	623b      	str	r3, [r7, #32]
                }
                update7SegmentWay1(counterWay1 / 100);
 80009c6:	6a3b      	ldr	r3, [r7, #32]
 80009c8:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <main+0x190>)
 80009ca:	fb82 1203 	smull	r1, r2, r2, r3
 80009ce:	1152      	asrs	r2, r2, #5
 80009d0:	17db      	asrs	r3, r3, #31
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff7f 	bl	80008d8 <update7SegmentWay1>
                break;
 80009da:	bf00      	nop
        }

        switch (stateWay2) {
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d035      	beq.n	8000a4e <main+0x14a>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	dc48      	bgt.n	8000a7a <main+0x176>
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <main+0xf2>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d016      	beq.n	8000a22 <main+0x11e>
 80009f4:	e041      	b.n	8000a7a <main+0x176>
            case 0:
                ledonway2("GREEN");
 80009f6:	4828      	ldr	r0, [pc, #160]	; (8000a98 <main+0x194>)
 80009f8:	f7ff ff3a 	bl	8000870 <ledonway2>
                if (counterWay2 <= 0) {
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	dc04      	bgt.n	8000a0c <main+0x108>
                    stateWay2 = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61fb      	str	r3, [r7, #28]
                    counterWay2 = 300;
 8000a06:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a0a:	61bb      	str	r3, [r7, #24]
                }
                update7SegmentWay2(counterWay2 / 100);
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <main+0x190>)
 8000a10:	fb82 1203 	smull	r1, r2, r2, r3
 8000a14:	1152      	asrs	r2, r2, #5
 8000a16:	17db      	asrs	r3, r3, #31
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff67 	bl	80008ee <update7SegmentWay2>
                break;
 8000a20:	e02b      	b.n	8000a7a <main+0x176>

            case 1:
                ledonway2("YELLOW");
 8000a22:	481e      	ldr	r0, [pc, #120]	; (8000a9c <main+0x198>)
 8000a24:	f7ff ff24 	bl	8000870 <ledonway2>
                if (counterWay2 <= 0) {
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	dc04      	bgt.n	8000a38 <main+0x134>
                    stateWay2 = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61fb      	str	r3, [r7, #28]
                    counterWay2 = 800;
 8000a32:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a36:	61bb      	str	r3, [r7, #24]
                }
                update7SegmentWay2(counterWay2 / 100);
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <main+0x190>)
 8000a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a40:	1152      	asrs	r2, r2, #5
 8000a42:	17db      	asrs	r3, r3, #31
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff51 	bl	80008ee <update7SegmentWay2>
                break;
 8000a4c:	e015      	b.n	8000a7a <main+0x176>

            case 2:
                ledonway2("RED");
 8000a4e:	4810      	ldr	r0, [pc, #64]	; (8000a90 <main+0x18c>)
 8000a50:	f7ff ff0e 	bl	8000870 <ledonway2>
                if (counterWay2 <= 0) {
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	dc04      	bgt.n	8000a64 <main+0x160>
                    stateWay2 = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
                    counterWay2 = 500;
 8000a5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a62:	61bb      	str	r3, [r7, #24]
                }
                update7SegmentWay2(counterWay2 / 100);
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <main+0x190>)
 8000a68:	fb82 1203 	smull	r1, r2, r2, r3
 8000a6c:	1152      	asrs	r2, r2, #5
 8000a6e:	17db      	asrs	r3, r3, #31
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff3b 	bl	80008ee <update7SegmentWay2>
                break;
 8000a78:	bf00      	nop
        }

        counterWay1--;
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
        counterWay2--;
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]

        HAL_Delay(10);
 8000a86:	200a      	movs	r0, #10
 8000a88:	f000 f952 	bl	8000d30 <HAL_Delay>
        switch (stateWay1) {
 8000a8c:	e757      	b.n	800093e <main+0x3a>
 8000a8e:	bf00      	nop
 8000a90:	080012c4 	.word	0x080012c4
 8000a94:	51eb851f 	.word	0x51eb851f
 8000a98:	080012d0 	.word	0x080012d0
 8000a9c:	080012c8 	.word	0x080012c8

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <MX_GPIO_Init+0xb4>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <MX_GPIO_Init+0xb4>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <MX_GPIO_Init+0xb4>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_GPIO_Init+0xb4>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <MX_GPIO_Init+0xb4>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_GPIO_Init+0xb4>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|LED_RED1_Pin
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f643 71fe 	movw	r1, #16382	; 0x3ffe
 8000aea:	481b      	ldr	r0, [pc, #108]	; (8000b58 <MX_GPIO_Init+0xb8>)
 8000aec:	f000 fba2 	bl	8001234 <HAL_GPIO_WritePin>
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin|A_Pin|B_Pin
                          |C_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|E1_Pin
 8000af0:	2200      	movs	r2, #0
 8000af2:	2177      	movs	r1, #119	; 0x77
 8000af4:	4819      	ldr	r0, [pc, #100]	; (8000b5c <MX_GPIO_Init+0xbc>)
 8000af6:	f000 fb9d 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED2_Pin LED_YELLOW2_Pin LED_GREEN2_Pin LED_RED1_Pin
                           LED_YELLOW1_Pin LED_GREEN1_Pin A_Pin B_Pin
                           C_Pin D_Pin E_Pin F_Pin
                           G_Pin */
  GPIO_InitStruct.Pin = LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin|LED_RED1_Pin
 8000afa:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8000afe:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin|A_Pin|B_Pin
                          |C_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4619      	mov	r1, r3
 8000b12:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_GPIO_Init+0xb8>)
 8000b14:	f000 fa14 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin E1_Pin
                           F1_Pin G1_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|E1_Pin
 8000b18:	2377      	movs	r3, #119	; 0x77
 8000b1a:	60bb      	str	r3, [r7, #8]
                          |F1_Pin|G1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2302      	movs	r3, #2
 8000b26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <MX_GPIO_Init+0xbc>)
 8000b30:	f000 fa06 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : D1_Pin */
  GPIO_InitStruct.Pin = D1_Pin;
 8000b34:	2308      	movs	r3, #8
 8000b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(D1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	4619      	mov	r1, r3
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_GPIO_Init+0xbc>)
 8000b48:	f000 f9fa 	bl	8000f40 <HAL_GPIO_Init>

}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	40010c00 	.word	0x40010c00

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_MspInit+0x60>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_MspInit+0x60>)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0a:	f000 f875 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
	...

08000c20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c20:	f7ff fff7 	bl	8000c12 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c26:	490c      	ldr	r1, [pc, #48]	; (8000c58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c28:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c3c:	4c09      	ldr	r4, [pc, #36]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f000 fb0b 	bl	8001264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4e:	f7ff fe59 	bl	8000904 <main>
  bx lr
 8000c52:	4770      	bx	lr
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c5c:	080012e0 	.word	0x080012e0
  ldr r2, =_sbss
 8000c60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c64:	2000002c 	.word	0x2000002c

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x28>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x28>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f92b 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff ff6a 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f935 	bl	8000f26 <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 f90b 	bl	8000eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x1c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x20>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <HAL_IncTick+0x20>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000028 	.word	0x20000028

08000d1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <HAL_GetTick+0x10>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	20000028 	.word	0x20000028

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff fff0 	bl	8000d1c <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffe0 	bl	8000d1c <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff90 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff49 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff5e 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff90 	bl	8000e30 <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5f 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffb0 	bl	8000e94 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b08b      	sub	sp, #44	; 0x2c
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f52:	e148      	b.n	80011e6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f54:	2201      	movs	r2, #1
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 8137 	bne.w	80011e0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4aa3      	ldr	r2, [pc, #652]	; (8001204 <HAL_GPIO_Init+0x2c4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d05e      	beq.n	800103a <HAL_GPIO_Init+0xfa>
 8000f7c:	4aa1      	ldr	r2, [pc, #644]	; (8001204 <HAL_GPIO_Init+0x2c4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d875      	bhi.n	800106e <HAL_GPIO_Init+0x12e>
 8000f82:	4aa1      	ldr	r2, [pc, #644]	; (8001208 <HAL_GPIO_Init+0x2c8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d058      	beq.n	800103a <HAL_GPIO_Init+0xfa>
 8000f88:	4a9f      	ldr	r2, [pc, #636]	; (8001208 <HAL_GPIO_Init+0x2c8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d86f      	bhi.n	800106e <HAL_GPIO_Init+0x12e>
 8000f8e:	4a9f      	ldr	r2, [pc, #636]	; (800120c <HAL_GPIO_Init+0x2cc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d052      	beq.n	800103a <HAL_GPIO_Init+0xfa>
 8000f94:	4a9d      	ldr	r2, [pc, #628]	; (800120c <HAL_GPIO_Init+0x2cc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d869      	bhi.n	800106e <HAL_GPIO_Init+0x12e>
 8000f9a:	4a9d      	ldr	r2, [pc, #628]	; (8001210 <HAL_GPIO_Init+0x2d0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d04c      	beq.n	800103a <HAL_GPIO_Init+0xfa>
 8000fa0:	4a9b      	ldr	r2, [pc, #620]	; (8001210 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d863      	bhi.n	800106e <HAL_GPIO_Init+0x12e>
 8000fa6:	4a9b      	ldr	r2, [pc, #620]	; (8001214 <HAL_GPIO_Init+0x2d4>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d046      	beq.n	800103a <HAL_GPIO_Init+0xfa>
 8000fac:	4a99      	ldr	r2, [pc, #612]	; (8001214 <HAL_GPIO_Init+0x2d4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d85d      	bhi.n	800106e <HAL_GPIO_Init+0x12e>
 8000fb2:	2b12      	cmp	r3, #18
 8000fb4:	d82a      	bhi.n	800100c <HAL_GPIO_Init+0xcc>
 8000fb6:	2b12      	cmp	r3, #18
 8000fb8:	d859      	bhi.n	800106e <HAL_GPIO_Init+0x12e>
 8000fba:	a201      	add	r2, pc, #4	; (adr r2, 8000fc0 <HAL_GPIO_Init+0x80>)
 8000fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc0:	0800103b 	.word	0x0800103b
 8000fc4:	08001015 	.word	0x08001015
 8000fc8:	08001027 	.word	0x08001027
 8000fcc:	08001069 	.word	0x08001069
 8000fd0:	0800106f 	.word	0x0800106f
 8000fd4:	0800106f 	.word	0x0800106f
 8000fd8:	0800106f 	.word	0x0800106f
 8000fdc:	0800106f 	.word	0x0800106f
 8000fe0:	0800106f 	.word	0x0800106f
 8000fe4:	0800106f 	.word	0x0800106f
 8000fe8:	0800106f 	.word	0x0800106f
 8000fec:	0800106f 	.word	0x0800106f
 8000ff0:	0800106f 	.word	0x0800106f
 8000ff4:	0800106f 	.word	0x0800106f
 8000ff8:	0800106f 	.word	0x0800106f
 8000ffc:	0800106f 	.word	0x0800106f
 8001000:	0800106f 	.word	0x0800106f
 8001004:	0800101d 	.word	0x0800101d
 8001008:	08001031 	.word	0x08001031
 800100c:	4a82      	ldr	r2, [pc, #520]	; (8001218 <HAL_GPIO_Init+0x2d8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001012:	e02c      	b.n	800106e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	623b      	str	r3, [r7, #32]
          break;
 800101a:	e029      	b.n	8001070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	3304      	adds	r3, #4
 8001022:	623b      	str	r3, [r7, #32]
          break;
 8001024:	e024      	b.n	8001070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	3308      	adds	r3, #8
 800102c:	623b      	str	r3, [r7, #32]
          break;
 800102e:	e01f      	b.n	8001070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	330c      	adds	r3, #12
 8001036:	623b      	str	r3, [r7, #32]
          break;
 8001038:	e01a      	b.n	8001070 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001042:	2304      	movs	r3, #4
 8001044:	623b      	str	r3, [r7, #32]
          break;
 8001046:	e013      	b.n	8001070 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d105      	bne.n	800105c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001050:	2308      	movs	r3, #8
 8001052:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	611a      	str	r2, [r3, #16]
          break;
 800105a:	e009      	b.n	8001070 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800105c:	2308      	movs	r3, #8
 800105e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	615a      	str	r2, [r3, #20]
          break;
 8001066:	e003      	b.n	8001070 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
          break;
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x130>
          break;
 800106e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2bff      	cmp	r3, #255	; 0xff
 8001074:	d801      	bhi.n	800107a <HAL_GPIO_Init+0x13a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	e001      	b.n	800107e <HAL_GPIO_Init+0x13e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3304      	adds	r3, #4
 800107e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	2bff      	cmp	r3, #255	; 0xff
 8001084:	d802      	bhi.n	800108c <HAL_GPIO_Init+0x14c>
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	e002      	b.n	8001092 <HAL_GPIO_Init+0x152>
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	3b08      	subs	r3, #8
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	210f      	movs	r1, #15
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	401a      	ands	r2, r3
 80010a4:	6a39      	ldr	r1, [r7, #32]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	431a      	orrs	r2, r3
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8090 	beq.w	80011e0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010c0:	4b56      	ldr	r3, [pc, #344]	; (800121c <HAL_GPIO_Init+0x2dc>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a55      	ldr	r2, [pc, #340]	; (800121c <HAL_GPIO_Init+0x2dc>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_GPIO_Init+0x2dc>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010d8:	4a51      	ldr	r2, [pc, #324]	; (8001220 <HAL_GPIO_Init+0x2e0>)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a49      	ldr	r2, [pc, #292]	; (8001224 <HAL_GPIO_Init+0x2e4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d00d      	beq.n	8001120 <HAL_GPIO_Init+0x1e0>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a48      	ldr	r2, [pc, #288]	; (8001228 <HAL_GPIO_Init+0x2e8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d007      	beq.n	800111c <HAL_GPIO_Init+0x1dc>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a47      	ldr	r2, [pc, #284]	; (800122c <HAL_GPIO_Init+0x2ec>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d101      	bne.n	8001118 <HAL_GPIO_Init+0x1d8>
 8001114:	2302      	movs	r3, #2
 8001116:	e004      	b.n	8001122 <HAL_GPIO_Init+0x1e2>
 8001118:	2303      	movs	r3, #3
 800111a:	e002      	b.n	8001122 <HAL_GPIO_Init+0x1e2>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <HAL_GPIO_Init+0x1e2>
 8001120:	2300      	movs	r3, #0
 8001122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001124:	f002 0203 	and.w	r2, r2, #3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4093      	lsls	r3, r2
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001132:	493b      	ldr	r1, [pc, #236]	; (8001220 <HAL_GPIO_Init+0x2e0>)
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800114c:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	4937      	ldr	r1, [pc, #220]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	608b      	str	r3, [r1, #8]
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800115a:	4b35      	ldr	r3, [pc, #212]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	43db      	mvns	r3, r3
 8001162:	4933      	ldr	r1, [pc, #204]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 8001164:	4013      	ands	r3, r2
 8001166:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	492d      	ldr	r1, [pc, #180]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	60cb      	str	r3, [r1, #12]
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	43db      	mvns	r3, r3
 800118a:	4929      	ldr	r1, [pc, #164]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 800118c:	4013      	ands	r3, r2
 800118e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4923      	ldr	r1, [pc, #140]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	491f      	ldr	r1, [pc, #124]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4919      	ldr	r1, [pc, #100]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	600b      	str	r3, [r1, #0]
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	43db      	mvns	r3, r3
 80011da:	4915      	ldr	r1, [pc, #84]	; (8001230 <HAL_GPIO_Init+0x2f0>)
 80011dc:	4013      	ands	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	3301      	adds	r3, #1
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	fa22 f303 	lsr.w	r3, r2, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f47f aeaf 	bne.w	8000f54 <HAL_GPIO_Init+0x14>
  }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	372c      	adds	r7, #44	; 0x2c
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	10320000 	.word	0x10320000
 8001208:	10310000 	.word	0x10310000
 800120c:	10220000 	.word	0x10220000
 8001210:	10210000 	.word	0x10210000
 8001214:	10120000 	.word	0x10120000
 8001218:	10110000 	.word	0x10110000
 800121c:	40021000 	.word	0x40021000
 8001220:	40010000 	.word	0x40010000
 8001224:	40010800 	.word	0x40010800
 8001228:	40010c00 	.word	0x40010c00
 800122c:	40011000 	.word	0x40011000
 8001230:	40010400 	.word	0x40010400

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	611a      	str	r2, [r3, #16]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <__libc_init_array>:
 8001264:	b570      	push	{r4, r5, r6, lr}
 8001266:	2600      	movs	r6, #0
 8001268:	4d0c      	ldr	r5, [pc, #48]	; (800129c <__libc_init_array+0x38>)
 800126a:	4c0d      	ldr	r4, [pc, #52]	; (80012a0 <__libc_init_array+0x3c>)
 800126c:	1b64      	subs	r4, r4, r5
 800126e:	10a4      	asrs	r4, r4, #2
 8001270:	42a6      	cmp	r6, r4
 8001272:	d109      	bne.n	8001288 <__libc_init_array+0x24>
 8001274:	f000 f81a 	bl	80012ac <_init>
 8001278:	2600      	movs	r6, #0
 800127a:	4d0a      	ldr	r5, [pc, #40]	; (80012a4 <__libc_init_array+0x40>)
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <__libc_init_array+0x44>)
 800127e:	1b64      	subs	r4, r4, r5
 8001280:	10a4      	asrs	r4, r4, #2
 8001282:	42a6      	cmp	r6, r4
 8001284:	d105      	bne.n	8001292 <__libc_init_array+0x2e>
 8001286:	bd70      	pop	{r4, r5, r6, pc}
 8001288:	f855 3b04 	ldr.w	r3, [r5], #4
 800128c:	4798      	blx	r3
 800128e:	3601      	adds	r6, #1
 8001290:	e7ee      	b.n	8001270 <__libc_init_array+0xc>
 8001292:	f855 3b04 	ldr.w	r3, [r5], #4
 8001296:	4798      	blx	r3
 8001298:	3601      	adds	r6, #1
 800129a:	e7f2      	b.n	8001282 <__libc_init_array+0x1e>
 800129c:	080012d8 	.word	0x080012d8
 80012a0:	080012d8 	.word	0x080012d8
 80012a4:	080012d8 	.word	0x080012d8
 80012a8:	080012dc 	.word	0x080012dc

080012ac <_init>:
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ae:	bf00      	nop
 80012b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012b2:	bc08      	pop	{r3}
 80012b4:	469e      	mov	lr, r3
 80012b6:	4770      	bx	lr

080012b8 <_fini>:
 80012b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ba:	bf00      	nop
 80012bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012be:	bc08      	pop	{r3}
 80012c0:	469e      	mov	lr, r3
 80012c2:	4770      	bx	lr
